DEBUG=0
HAVE_OPENGL=0

UNAME=$(shell uname -a)

ifeq ($(platform),)
platform = unix
ifeq ($(UNAME),)
   platform = win
else ifneq ($(findstring MINGW,$(UNAME)),)
   platform = win
else ifneq ($(findstring Darwin,$(UNAME)),)
   platform = osx
else ifneq ($(findstring win,$(UNAME)),)
   platform = win
else ifneq ($(findstring aarch64,$(UNAME)),)
   platform = arm
endif
endif

TARGET_NAME := stonesoup
GIT_VERSION := " $(shell git rev-parse --short HEAD || echo unknown)"
ifneq ($(GIT_VERSION)," unknown")
	CXXFLAGS += -DGIT_VERSION=\"$(GIT_VERSION)\"
endif

COMMONFLAGS :=

ifneq (,$(findstring unix,$(platform)))
   TARGET := $(TARGET_NAME)_libretro.so
	fpic := -fPIC
   # COMMONFLAGS += -msse -msse2 -DUNIX
   COMMONFLAGS += -DUNIX
	LDFLAGS += -lpthread
   LDFLAGS += -shared -Wl,--version-script=libretro/link.T -Wl,--no-undefined
else ifneq (,$(findstring osx,$(platform)))
   TARGET := $(TARGET_NAME)_libretro.dylib
	fpic := -fPIC
   COMMONFLAGS += -DDARWIN_NO_CARBON -DUNIX
   CXXFLAGS += -stdlib=libc++
   LDFLAGS += -dynamiclib -stdlib=libc++
ifeq ($(HAVE_OPENGL), 1)
   LDFLAGS += -framework OpenGL
endif
else ifneq (,$(findstring ios,$(platform)))
   ifeq ($(IOSSDK),)
      IOSSDK := $(shell xcodebuild -version -sdk iphoneos Path)
   endif

   TARGET := $(TARGET_NAME)_libretro_ios.dylib
   fpic := -fPIC
   COMMONFLAGS += -marm -DHAVE_POSIX_MEMALIGN -DGLES -DUNIX -DDARWIN_NO_CARBON
   CPPFLAGS += -stdlib=libc++ 
   LDFLAGS += -dynamiclib -marm -stdlib=libc++
   CC       = cc  -arch armv7 -isysroot $(IOSSDK) -miphoneos-version-min=5.0
   CXX      = c++ -arch armv7 -isysroot $(IOSSDK) -miphoneos-version-min=5.0   
   HAVE_NEON = 1
ifeq ($(HAVE_OPENGL), 1)
   LDFLAGS += -framework OpenGLES
endif
ifeq ($(platform),ios9)
CC     += -miphoneos-version-min=8.0
CXX    += -miphoneos-version-min=8.0
CFLAGS += -miphoneos-version-min=8.0
else
CC     += -miphoneos-version-min=5.0
CXX    += -miphoneos-version-min=5.0
CFLAGS += -miphoneos-version-min=5.0
endif
else ifneq (,$(findstring win,$(platform)))
   CC = gcc
   CXX = g++
   TARGET := $(TARGET_NAME)_libretro.dll
   COMMONFLAGS += -msse -msse2  -DTARGET_OS_WINDOWS
   LDFLAGS += -shared -static-libgcc -static-libstdc++ -Wl,--version-script=libretro/link.T -lwinmm -lgdi32
else ifneq (,$(findstring arm,$(platform)))
   TARGET := $(TARGET_NAME)_libretro.so
   fpic := -fPIC
   LDFLAGS += -lpthread -march=armv8-a
   LDFLAGS += -shared -Wl,--version-script=libretro/link.T -Wl,--no-undefined
   COMMONFLAGS += -march=armv8-a -DHAVE_POSIX_MEMALIGN -DGLES -DUNIX
   CC       = gcc -march=armv8-a
   CXX      = g++ -march=armv8-a
   HAVE_NEON = 1
   ifeq ($(HAVE_OPENGL), 1)
     LDFLAGS += -framework OpenGLES
   endif
endif

SOURCES_C   :=
SOURCES_CXX :=

CORE_DIR    := .

include Makefile.common

OBJECTS     += $(SOURCES_C:.c=.o) $(SOURCES_CXX:.cc=.o) $(SOURCES_OBJ:.S=.o)

COMMONFLAGS += -DFT2_BUILD_LIBRARY -DHAVE_FDATASYNC -D__LIBRETRO__ -DSQLITE_OMIT_LOAD_EXTENSION -DUSE_TILE -DUSE_TILE_LOCAL -DWIZARD -DUSE_FT $(fpic) -DPROPORTIONAL_FONT=\"DejaVuSans.ttf\" -DMONOSPACED_FONT=\"DejaVuSansMono.ttf\" 

ifeq ($(HAVE_OPENGL), 1)
COMMONFLAGS += -DUSE_RETROGL
else
COMMONFLAGS += -DUSE_FB
endif

# Build flags
CXXFLAGS += -std=c++11

CPPFLAGS +=  $(COMMONFLAGS) $(INCFLAGS)
CFLAGS   +=  $(COMMONFLAGS) $(INCFLAGS)

# Rules
ifeq ($(DEBUG), 1)
   CPPFLAGS += -O0 -g
   CFLAGS += -O0 -g
else
   CPPFLAGS += -O3 -DNDEBUG
   CFLAGS += -O3 -DNDEBUG
endif

all: $(TARGET)

$(TARGET): $(OBJECTS)
ifeq ($(STATIC_LINKING),1)
	$(AR) rcs $@ $(OBJECTS)
else
	$(CXX) $(fpic) -o $@ $(OBJECTS) $(LDFLAGS)
endif

%.o: %.c
	$(CC) $(INCFLAGS) $(CFLAGS) -c -o $@ $<

%.o: %.cpp
	$(CXX) $(INCFLAGS) $(CXXFLAGS) -c -o $@ $<

generate:
	cd source && ./util/gen-mst.pl
	cd source && ./util/art-data.pl
	cd source && ./util/gen-mi-enum
	cd source && ./util/cmd-name.pl
	cd source && ./util/gen-luatags.pl
	cd source && ./util/gen_ver.pl build.h
	cd source && ./util/gen-cflg.pl compflag.h "$(CPPFLAGS) $(CXXFLAGS)" "$(LDFLAGS)" "libretro" "retro"
	$(MAKE) -C source/rltiles all TILES=1
	cp source/rltiles/*.png source/dat/tiles
	cp source/contrib/fonts/*.ttf source/dat

clean:
	rm -f $(OBJECTS) $(TARGET)

.PHONY: clean generate
